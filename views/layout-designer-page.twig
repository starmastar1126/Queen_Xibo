{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2018 Spring Signage Ltd
 * (${FILE_NAME})
 */
#}

{% extends "authed.twig" %}
{% import "inline.twig" as inline %}

{% block pageContent %}

    <!-- Editor structure -->
    <div id="layout-editor" data-layout-id="{{ layout.layoutId }}"></div>
    
{% endblock %}

    {% block javaScript %}       
        <script src="{{ theme.rootUri() }}dist/layoutDesigner.bundle.min.js"></script>
        <script type="text/javascript">

            const urlsForApi = {
                layout: {
                    get: {
                        url: "{{ urlFor("layout.search", {id: layout.layoutId}) }}",
                        type: 'GET'
                    },
                    getForm: {
                        url: "{{ urlFor("layout.edit.form", {id: layout.layoutId}) }}",
                        type: 'GET'
                    },
                    saveForm: {
                        url: "{{ urlFor("layout.edit", {id: layout.layoutId}) }}",
                        type: 'PUT'
                    },
                    downloadBackground: {
                        url: "{{ urlFor("layout.download.background", {id: layout.layoutId}) }}",
                        type: 'GET'
                    }
                },
                region: {
                    transform: {
                        url: "{{ urlFor("region.position.all", {id: layout.layoutId}) }}",
                        type: 'PUT'
                    },
                    getForm: {
                        url: "{{ urlFor("region.edit.form") }}",
                        type: 'GET'
                    },
                    saveForm: {
                        url: "{{ urlFor("region.edit") }}",
                        type: 'PUT'
                    },
                    create: {
                        url: "{{ urlFor("region.add", {id: layout.layoutId}) }}",
                        type: 'POST'
                    },
                    delete: {
                        url: "{{ urlFor("region.delete") }}",
                        type: 'DELETE'
                    }
                },
                widget: {
                    getForm: {
                        url: "{{ urlFor("module.widget.edit.form") }}",
                        type: 'GET'
                    },
                    saveForm: {
                        url: "{{ urlFor("module.widget.edit") }}",
                        type: 'PUT'
                    }
                }
            };

            var translation = {
                savePositionsFirst: "{% autoescape "js" %}{{ "Please save the pending position changes first by clicking Save Positions or cancel by clicking Undo."|trans }}{% endautoescape %}"
            };

            var librarySearchUrl = "{{ urlFor("library.search") }}";
            var libraryAddUrl = "{{ urlFor("library.add") }}";
            var libraryPlaylistAssignUrl = "{{ urlFor("playlist.library.assign.form") }}";
            var uploadFormUpdateAllDefault = {% if settings.LIBRARY_MEDIA_UPDATEINALL_CHECKB == "Checked" %}true{% else %}false{% endif %};
            var uploadFormDeleteOldDefault = {% if settings.LIBRARY_MEDIA_DELETEOLDVER_CHECKB == "Checked" %}true{% else %}false{% endif %};
            {% autoescape "js" %}
            var playlistTrans = {
                uploadMessage: "{% trans "Upload media" %}",
                addFiles: "{% trans "Add files" %}",
                startUpload: "{% trans "Start upload" %}",
                cancelUpload: "{% trans "Cancel upload" %}",
                viewLibrary: "{% trans "View Library" %}"
            }
            var playlistAddFilesTrans = {
                addFiles: "{% trans "Add Replacement" %}",
                startUpload: "{% trans "Start Replace" %}",
                cancelUpload: "{% trans "Cancel Replace" %}",
                updateInLayouts: {
                    title: "{% trans "Update this media in all layouts it is assigned to?" %}",
                    helpText: "{% trans "Note: It will only be updated in layouts you have permission to edit." %}"
                },
                deleteOldRevisions: {
                    title: "{% trans "Delete the old version?" %}",
                    helpText: "{% trans "Completely remove the old version of this media item if a new file is being uploaded." %}"
                }
            }
            {% endautoescape %}


            function timelineGridCallback(dialog) {

                dialog.addClass("modal-big");

                var timelineWidgetTabel = $("#timelineWidgets").DataTable({
                    "language": dataTablesLanguage,
                    serverSide: true, stateSave: true, stateDuration: 0,
                    filter: false,
                    searchDelay: 3000,
                    "order": [[0, "asc"]],
                    ajax: {
                        url: "{{ urlFor("playlist.widget.search") }}",
                        "data": function (d) {
                            $.extend(d, $("#timelineWidgets").closest(".XiboGrid").find(".FilterDiv form").serializeObject());
                        }
                    },
                    "columns": [
                        {"data": "displayOrder"},
                        {"data": "name", "orderable": false},
                        {"data": "type"},
                        {
                            "data": "calculatedDuration",
                            "render": function(data) {
                                return (data == 0) ? 'N/A' : data;
                            }
                        },
                        {"data": "transition"},
                        {
                            "orderable": false,
                            "data": dataTableButtonsColumn
                        }
                    ]
                });

                timelineWidgetTabel.on('draw', dataTableDraw);
                timelineWidgetTabel.on('processing.dt', dataTableProcessing);

                // Hook up the library Upload Buttons
                $(".libraryUploadForm").click(libraryUploadClick);
            }

            function DeleteRegion(form, regionId) {
                $.ajax({
                    type: form.attr("method"),
                    url: form.attr("action"),
                    cache: false,
                    dataType: "json",
                    data: form.serialize(),
                    success: function (xhr, textStatus, error) {

                        XiboSubmitResponse(xhr, form);

                        if (xhr.success)
                            $("#region_" + regionId).remove();
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        SystemMessage(xhr.responseText, false);
                    }
                });
            }

            // Bind to the add button when we load
            $(document).ready(function () {

                // Add region button
                $("#regionAddButton").click(function (e) {
                    e.preventDefault();
                    $.ajax({
                        type: "post",
                        url: $(this).attr("href"),
                        cache: false,
                        dataType: "json",
                        success: function (xhr, textStatus, error) {

                            XiboSubmitResponse(xhr);

                            if (xhr.success) {
                                // Reload the designer
                                window.location.reload();
                            }
                        }
                    });
                });
            });

            $("[name='my-checkbox']").bootstrapSwitch();



        </script>


        {% for module in modules %}
            {% if module.layoutDesignerJavaScript() != "" %}
                {% include module.layoutDesignerJavaScript() ~ ".twig" %}
            {% endif %}
        {% endfor %}

    {% endblock %}
