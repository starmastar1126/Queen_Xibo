{#
/**
 * Copyright (C) 2020 Xibo Signage Ltd
 *
 * Xibo - Digital Signage - http://www.xibo.org.uk
 *
 * This file is part of Xibo.
 *
 * Xibo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * Xibo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.
 */
#}

<script type="text/javascript">
    function actionFormOpen(dialog) {

        onTargetChange(dialog);

        $(dialog).find("#target").on('change', function () {
            onTargetChange(dialog);
        });

        onActionTypeChange(dialog);

        $(dialog).find("#actionType").on('change', function () {
            onActionTypeChange(dialog);
        });

        onTriggerChange(dialog);
        $(dialog).find("#triggerType").on('change', function() {
            onTriggerChange(dialog);
        })
    }

    function onTargetChange(dialog) {
        var target = $(dialog).find("#target").val();
        var targetId = $(dialog).find(".targetid-control");

        if (target === 'region') {
            targetId.removeClass("hidden");
        } else {
            $('#targetId').val('');
            targetId.addClass("hidden");
        }
    }

    function onActionTypeChange(dialog) {
        var actionType = $(dialog).find('#actionType').val();

        var navLayout = $(dialog).find(".nav-control-layout");
        var navWidget = $(dialog).find(".nav-control-widget");
        var target = $(dialog).find(".target-control");

        if (actionType === 'navLayout') {
            // nav Layout, hide Widget and Target dropdowns and clear corresponding values
            navLayout.removeClass("hidden");
            navWidget.addClass("hidden");
            $("#target").val("screen").change();
            target.addClass("hidden");
            $('#widgetId').val('');
            $('#targetId').val('');
        } else if (actionType === 'navWidget') {
            // nav Widget, hide LayoutCode and clear its value
            navLayout.addClass("hidden");
            navWidget.removeClass("hidden");
            target.removeClass("hidden");
            $('#layoutCode').val('');
        } else {
            // not in nav Action Type, clear values, hide
            navLayout.addClass("hidden");
            navWidget.addClass("hidden");
            target.removeClass("hidden");
            $('#widgetId').val('');
            $('#layoutCode').val('');
        }
    }

    function onTriggerChange(dialog) {
        var triggerType = $(dialog).find("#triggerType").val();
        var triggerCode = $(dialog).find(".trigger-code-control");

        if (triggerType === 'webhook') {
            triggerCode.removeClass('hidden');
        } else {
            triggerCode.addClass('hidden');
            $('#triggerCode').val('');
        }
    }

    function showActionsGrid(source, sourceId) {
        // create the table only when we are on Action tab
        $('.nav-tabs a').on('shown.bs.tab', function(event) {
            if ($(event.target).text() === 'Actions') {
                // Expose the button
                $('.action-button-add').removeClass("hidden");

                // initialize the table only if it's not already initialized
                if (!$.fn.DataTable.isDataTable('#actions')) {
                    // Configure the DataTable
                    var table = $("#actions").DataTable({
                        "language": dataTablesLanguage,
                        serverSide: true,
                        stateSave: true,
                        stateDuration: 0,
                        "filter": false,
                        searchDelay: 3000,
                        "order": [[0, "asc"]],
                        ajax: {
                            url: "{{ url_for("action.search") }}",
                            "data": function (d) {
                                $.extend(d, {
                                    "source": source,
                                    "sourceId": sourceId
                                });
                            }
                        },
                        "columns": [
                            {"data": "actionId", "visible": false},
                            {"data": "ownerId", "visible": false},
                            {
                                "data": "triggerType",
                                "render": function(data, type, row, meta) {
                                    if (type === "display") {
                                        if (data === "touch") {
                                            return "{{ "Touch/Click"|trans }}";
                                        } else if (data === "webhook") {
                                            return "{{ "Web hook"|trans }}"
                                        } else {
                                            return data;
                                        }
                                    } else {
                                        return data;
                                    }
                                }
                            },
                            {"data": "triggerCode", "visible": false},
                            {
                                "data": "actionType",
                                "render": function(data, type, row, meta) {
                                    if (type === "display") {
                                        if (data === "next") {
                                            return "{{ "Next"|trans }}";
                                        } else if (data === "previous") {
                                            return "{{ "Previous"|trans }}"
                                        } else if (data === "navLayout") {
                                            return "{{ "Navigate to Layout"|trans }}"
                                        } else if (data === "navWidget") {
                                            return "{{ "Navigate to Widget"|trans }}"
                                        } else {
                                            return data;
                                        }
                                    } else {
                                        return data;
                                    }
                                }
                            },
                            {
                                "data": "target",
                                "render": function(data, type, row, meta) {
                                    if (type === "display") {
                                        if (data === "region") {
                                            return "{{ "Region"|trans }}";
                                        } else if (data === "screen") {
                                            return "{{ "Screen"|trans }}"
                                        } else {
                                            return data;
                                        }
                                    } else {
                                        return data;
                                    }
                                }
                            },
                            {
                                "data": "targetId",
                                "render": function(data, type, row, meta) {
                                    if (type === "display" && data !== null && data !== "") {
                                        return "<span title=\"" + data + "\">" + row.regionName + "</span>";
                                    } else {
                                        return data;
                                    }
                                },
                                "visible": false
                            },
                            {
                                "data": "widgetId",
                                "render": function(data, type, row, meta) {
                                    if (type === "display" && data !== null && data !== "") {
                                        return "<span title=\"" + data + "\">" + row.widgetName + "</span>";
                                    } else {
                                        return data;
                                    }
                                },
                                "visible": false
                            },
                            {"data": "layoutCode"},
                            {
                                "orderable": false,
                                "data": dataTableButtonsColumn
                            }
                        ]
                    });
                    table.on('draw', dataTableDraw);
                    table.on('processing.dt', dataTableProcessing);
                    dataTableAddButtons(table, $('#actions_wrapper').find('.col-sm-6').eq(1), false);
                }
            } else {
                // Hide the button
                $('.action-button-add').addClass("hidden");
            }
        });
    }


</script>