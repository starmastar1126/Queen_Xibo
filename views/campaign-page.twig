{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2015 Spring Signage Ltd
 * (campaign-page.twig)
 */
This is the template for the campaign page
#}
{% extends "authed.twig" %}
{% import "inline.twig" as inline %}

{% block actionMenu %}
    <ul class="nav nav-pills pull-right">
        <li><a class="XiboFormButton" title="{% trans "Add a new Campaign" %}" href="{{ urlFor("campaign.add.form") }}">{% trans "Add Campaign" %}</a></li>
    </ul>
{% endblock %}


{% block pageContent %}
    <div class="widget">
        <div class="widget-title">{% trans "Campaigns" %}</div>
        <div class="widget-body">
            <div class="XiboGrid" id="{{ random() }}">
                <div class="XiboFilter">
                    <div class="FilterDiv" id="Filter">
                        <form class="form-inline">
                            {{ inline.checkbox("XiboFilterPinned", "Keep Open", defaults.filterPinned) }}
                        </form>
                    </div>
                </div>
                <div class="XiboData">
                    <table id="campaigns" class="table table-striped">
                        <thead>
                            <tr>
                                <th>{% trans "Name" %}</th>
                                <th>{% trans "# Layouts" %}</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javaScript %}
    <script type="text/javascript">
        var table = $("#campaigns").DataTable({
            serverSide: true,
            "filter": false,
            searchDelay: 3000,
            "order": [[ 0, "asc"]],
            ajax: {
                url: "{{ urlFor("campaign.search") }}",
                "data": function(d) {
                    $.extend(d, $("#campaigns").closest(".XiboGrid").find(".FilterDiv form").serializeObject());
                }
            },
            "columns": [
                { "data": "campaign" },
                { "data": "numberLayouts" },
                {
                    "orderable": false,
                    "data": dataTableButtonsColumn
                }
            ]
        });

        table.on('draw', dataTableDraw);
        table.on('processing.dt', dataTableProcessing);

        // Callback for the media form
        function layoutFormCallBack() {
            var layoutTable = $("#layoutAssignments").DataTable({
                serverSide: true,
                searchDelay: 3000,
                "order": [[ 0, "asc"]],
                "filter": false,
                ajax: {
                    url: "{{ urlFor("layout.search") }}",
                    "data": function(d) {
                        $.extend(d, $("#layoutAssignments").closest(".XiboGrid").find(".layoutAssignFilterOptions form").serializeObject());
                    }
                },
                "columns": [
                    { "data": "layoutId" },
                    { "data": "layout" },
                    {
                        "sortable": false,
                        "data": function(data, type, row, meta) {
                            if (type != "display")
                                return "";

                            // Create a click-able span
                            return "<a href=\"#\" class=\"assignItem\"><span class=\"glyphicon glyphicon-plus-sign\"></a>";
                        }
                    }
                ]
            });

            layoutTable.on('draw', function(e, settings) {
                dataTableDraw(e, settings);

                // Clicky on the +spans
                $(".assignItem", "#layoutAssignments").click(function() {
                    // Get the row that this is in.
                    var data = layoutTable.row($(this).closest("tr")).data();

                    // Construct a new list item for the lower list and append it.
                    var newItem = $("<li/>", {
                        "text": data.layout,
                        "data-layout-id": data.layoutId,
                        "class": "btn btn-sm btn-default",
                        "dblclick": function(){
                            $(this).remove();
                        }
                    });

                    newItem.appendTo("#LayoutAssignSortable");

                    // Add a span to that new item
                    $("<span/>", {
                        "class": "glyphicon glyphicon-minus-sign",
                        click: function(){
                            $(this).parent().remove();
                        }
                    }).appendTo(newItem);
                });
            });
            layoutTable.on('processing.dt', dataTableProcessing);

            // Make our little list sortable
            $("#LayoutAssignSortable").sortable();

            // Bind the filter form
            $(".layoutAssignFilterOptions").find("input, select").change(function() {
                layoutTable.ajax.reload();
            });
        }

        function layoutAssignSubmit() {
            // Collect our media
            var layout = [];
            $("#LayoutAssignSortable > li").each(function() {
                layout.push($(this).data().layoutId);
            });

            assignLayoutsToCampaign($("#LayoutAssign").data().url, layout);
        }

        var assignLayoutsToCampaign = function(url, layout) {
            toastr.info(layout, "Assign Layouts to Campaign");

            $.ajax({
                type: "post",
                url: url,
                cache: false,
                dataType: "json",
                data: {layoutIds: layout},
                success: XiboSubmitResponse
            });
        };
    </script>
{% endblock %}