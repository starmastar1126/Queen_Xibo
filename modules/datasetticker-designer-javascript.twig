{#
 * Copyright (C) 2017-2018 Xibo Signage Ltd
 *
 * Xibo - Digital Signage - http://www.xibo.org.uk
 *
 * This file is part of Xibo.
 *
 * Xibo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * Xibo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.
#}

<script type="text/javascript">

    // Runs after form opens
    function datasetticker_form_edit_open() {

        if($(this).find('form').data('formStep') === 1) {
            // If data set exists, set the drop-down to that value
            if(this.data().elementOptions.dataSetId !== undefined) {
                $(this).find('#dataSetId').val(this.data().elementOptions.dataSetId);
            }
        } else if($(this).find('form').data('formStep') === 2) {
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#useDuration', '.duration-fields');

            // Set display location field, using the helper ()
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#useDisplayLocation', '', '.locationControls');

            // Set order and filtering clauses fields, using the helper ()
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#useOrderingClause', '.order-clause-field', '#orderClause');
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#useFilteringClause', '.filter-clause-field', '#filterClause');

            tickerConfigureQueryBuilder(this);
        }
    }

    // Runs before form submit
    function datasetticker_form_edit_submit() {

        if($(this).find('form').data('formStep') === 2) {
            var form = $("#dataSetTickerForm2");

            // Clean the previous generated hidden dataSetColumns from the form
            form.find('input[name="dataSetColumnId[]"]').remove();

            // Add all the selected columns to the form as hidden input fields
            $($("#columnsIn").sortable('toArray')).each(function() {
                form.append('<input type="hidden" name="dataSetColumnId[]" value="' + this + '" />');
            });

            // Submit the form
            form.data("apply", true);
            
            formHelpers.updateCKEditor();
        }
    }

    function tickerConfigureQueryBuilder(dialog) {

        // Translations for the query builder
        var translations = {
            ascTitle: "{% trans "Ascending" %}",
            descTitle: "{% trans "Descending" %}",
            filterOptions: [
                {
                    id: "starts-with",
                    value: "{% trans "starts with" %}"
                }, {
                    id: "ends-with",
                    value: "{% trans "ends with" %}"
                }, {
                    id: "contains",
                    value: "{% trans "contains" %}"
                }, {
                    id: "equals",
                    value: "{% trans "equals" %}"
                }, {
                    id: "not-starts-with",
                    value: "{% trans "does not start with" %}"
                }, {
                    id: "not-ends-with",
                    value: "{% trans "does not end with" %}"
                }, {
                    id: "not-contains",
                    value: "{% trans "does not contain" %}"
                }, {
                    id: "not-equals",
                    value: "{% trans "does not equal" %}"
                }, {
                    id: "greater-than",
                    value: "{% trans "greater than" %}"
                }, {
                    id: "less-than",
                    value: "{% trans "less than" %}"
                }
            ],
            filterOperatorOptions: [
                {
                    id: "OR",
                    value: "{% trans "Or" %}"
                }, {
                    id: "AND",
                    value: "{% trans "And" %}"
                }
            ]
        };

        // Configure the query for sorting and filtering
        formHelpers.configureQueryBuilder(dialog, translations);

        // Initialise CKEditor for the ta_text
        formHelpers.setupCKEditor($(dialog), null, 'ta_text');
        
        // Initialise CKEditor for the noDataMessage
        formHelpers.setupCKEditor($(dialog), null, 'noDataMessage');
    }

</script>