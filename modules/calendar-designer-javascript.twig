{#
/**
 * Xibo - Digital Signage - http://www.xibo.org.uk
 * Copyright (C) 2018 Spring Signage Ltd
 *
 * This file is part of Xibo.
 *
 * Xibo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * Xibo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Xibo.  If not, see <http://www.gnu.org/licenses/>.
 */
#}

<script type="text/javascript">

    // Runs after form opens
    function calendar_form_edit_open() {

        // Set duration field, using the helper
        formHelpers.setupCheckboxInputFields($(this).find('form'), '#useDuration', '.duration-fields');

        // Set template field, using the helper
        formHelpers.setupCheckboxInputFields($(this).find('form'), '#useCurrentTemplate', '.current-event-template');

        const self = this;
        const formEditorSetup  = function() {

            // Main editor depends on the inline editor or the advanced option
            if(!$(self).data('formEditorOnly')) { // Using inline Editor
                // Show/Hide inline editor depending on the overrideTemplate and advancedEditor checkboxes
                $(self).data().viewerObject.setupInlineEditor('ta_text', $(self).find('form #advancedEditor').is(':checked'));

                // Show template group if override template is on, and if the advance editor is off
                $(self).find('.template-group-editor').toggle(!$(self).find('form #advancedEditor').is(':checked')); 
            } else {
                // Using form editor
                if($(self).find('form #advancedEditor').is(':checked')) {
                    formHelpers.setupCKEditor(self, null, 'ta_text');
                } else {
                    var textAreaId = $(self).find('textarea[name="ta_text"]').attr('id');
                    formHelpers.destroyCKEditor(textAreaId);
                }
                
            }

            // Alternative template just depends on the advanced Editor option
            if($(self).find('form #advancedEditor').is(':checked')) {
                formHelpers.setupCKEditor(self, null, 'currentEventTemplate');
            } else { 
                var textAreaId2 = $(self).find('textarea[name="currentEventTemplate"]').attr('id');
                formHelpers.destroyCKEditor(textAreaId2);
            }
        };

        // Initialize editor
        formEditorSetup();

        // Setup form and have a callback to restart the CKEditor instance
        formHelpers.setupForm(this, function() {
            formEditorSetup();
        }, 'ta_text');

        // Setup form and have a callback to restart the CKEditor instance
        formHelpers.setupForm(this, null, 'ta_text');
            
        // Setup alternative template for the code snippets
        formHelpers.setupForm(this, null, 'currentEventTemplate');
    }

    // Runs before form submit
    function calendar_form_edit_submit() {

        // Update text callback fields
        formHelpers.updateCKEditor();
    }

</script>
