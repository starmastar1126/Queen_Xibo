{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2015 Spring Signage Ltd
 * (${FILE_NAME})
 */
// Augment settings with templates
        $this->loadTemplates();

        // Configure form
        $this->configureForm('AddMedia');

        // Two tabs
        $tabs = array();
        $tabs[] = Form::AddTab('general', __('General'));
        $tabs[] = Form::AddTab('advanced', __('Appearance'));
        $tabs[] = Form::AddTab('forecast', __('Forecast'));

        Theme::Set('form_tabs', $tabs);

        $formFields['general'][] = Form::AddText('name', __('Name'), NULL,
            __('An optional name for this media'), 'n');

        $formFields['general'][] = Form::AddNumber('duration', __('Duration'), NULL,
            __('The duration in seconds this item should be displayed.'), 'd', 'required');

        $formFields['general'][] = Form::AddCheckbox('useDisplayLocation', __('Use the Display Location'), $this->GetOption('useDisplayLocation'),
            __('Use the location configured on the display'), 'd');

        // Any values for the form fields should be added to the theme here.
        $formFields['general'][] = Form::AddNumber('latitude', __('Latitude'), $this->GetOption('latitude'),
            __('The Latitude for this weather module'), 'l', '', 'locationControls');

        $formFields['general'][] = Form::AddNumber('longitude', __('Longitude'), $this->GetOption('longitude'),
            __('The Longitude for this weather module'), 'g', '', 'locationControls');

        $formFields['advanced'][] = Form::AddCombo('templateId', __('Weather Template'), $this->GetOption('templateId'),
            $this->module->settings['templates'],
            'id',
            'value',
            __('Select the template you would like to apply. This can be overridden using the check box below.'), 't', 'template-selector-control');

        $formFields['advanced'][] = Form::AddCombo('icons', __('Icons'), $this->GetOption('icons'),
            $this->iconsAvailable(),
            'id',
            'value',
            __('Select the icon set you would like to use.'), 't', 'icon-controls');

        $formFields['advanced'][] = Form::AddNumber('size', __('Size'), $this->GetOption('size', 1),
            __('Set the size. Start at 1 and work up until the widget fits your region appropriately.'), 's', 'number', 'template-selector-control');

        $formFields['advanced'][] = Form::AddCombo('units', __('Units'), $this->GetOption('units'),
            $this->unitsAvailable(),
            'id',
            'value',
            __('Select the units you would like to use.'), 'u');

        $formFields['advanced'][] = Form::AddCombo('lang', __('Language'), Translate::GetLocale(2),
            $this->supportedLanguages(),
            'id',
            'value',
            __('Select the language you would like to use.'), 'l');

        $formFields['advanced'][] = FormManager::AddNumber('updateInterval', __('Update Interval (mins)'), $this->GetOption('updateInterval', 60),
            __('Please enter the update interval in minutes. This should be kept as high as possible. For example, if the data will only change once per hour this could be set to 60.'),
            'n', 'required');

        $formFields['advanced'][] = FormManager::AddCheckbox('dayConditionsOnly', __('Only show Daytime weather conditions'), 1,
            __('Tick if you would like to only show the Daytime weather conditions.'), 'd');

        $formFields['general'][] = FormManager::AddText('color', __('Colour'), '#000',
            __('Please select a colour for the foreground text.'), 'c', 'required');

        $formFields['advanced'][] = Form::AddCheckbox('overrideTemplate', __('Override the template?'), 0,
            __('Tick if you would like to override the template.'), 'o');

        $formFields['advanced'][] = Form::AddMultiText('currentTemplate', __('Template for Current Forecast'), NULL,
            __('Enter the template for the current forecast. For a list of substitutions click "Request Forecast" below.'), 't', 10, 'required', 'template-override-controls');

        $formFields['advanced'][] = Form::AddMultiText('dailyTemplate', __('Template for Daily Forecast'), NULL,
            __('Enter the template for the daily forecast. Replaces [dailyForecast] in main template.'), 't', 10, NULL, 'template-override-controls');

        $formFields['advanced'][] = Form::AddMultiText('styleSheet', __('CSS Style Sheet'), NULL, __('Enter a CSS style sheet to style the weather widget'), 'c', 10, 'required', 'template-override-controls');

        $formFields['forecast'][] = Form::AddMessage(__('Please press Request Forecast'));

        // Configure the field dependencies
        $this->SetFieldDepencencies($response);

        // Append the Templates to the response
        $response->extra = $this->module->settings['templates'];

        // Modules should be rendered using the theme engine.
        Theme::Set('form_fields_general', $formFields['general']);
        Theme::Set('form_fields_advanced', $formFields['advanced']);
        Theme::Set('form_fields_forecast', $formFields['forecast']);
        $response->html = Theme::RenderReturn('form_render');

        // The response object outputs the required JSON object to the browser
        // which is then processed by the CMS JavaScript library (xibo-cms.js).
        $response->AddButton(__('Request Forecast'), 'requestTab("forecast", "index.php?p=module&q=exec&mod=' . $this->getModuleType() . '&method=requestTab&widgetId=' . $this->getWidgetId() . '")');
        $this->configureFormButtons($response);

        $response->dialogTitle = __('Forecast IO');
        $response->callBack = 'forecastIoFormSetup';

        // Add a dependency
        $locationControls_0 = array(
            '.locationControls' => array('display' => 'block')
        );

        $locationControls_1 = array(
            '.locationControls' => array('display' => 'none')
        );

        $response->AddFieldAction('useDisplayLocation', 'init', false, $locationControls_0, 'is:checked');
        $response->AddFieldAction('useDisplayLocation', 'change', false, $locationControls_0, 'is:checked');
        $response->AddFieldAction('useDisplayLocation', 'init', true, $locationControls_1, 'is:checked');
        $response->AddFieldAction('useDisplayLocation', 'change', true, $locationControls_1, 'is:checked');
        $response->AddFieldAction('templateId', 'init', 'picture', array('.icon-controls' => array('display' => 'block')));
        $response->AddFieldAction('templateId', 'change', 'picture', array('.icon-controls' => array('display' => 'block')));
        $response->AddFieldAction('templateId', 'init', 'picture', array('.icon-controls' => array('display' => 'none')), 'not');
        $response->AddFieldAction('templateId', 'change', 'picture', array('.icon-controls' => array('display' => 'none')), 'not');

        // When the override template check box is ticked, we want to expose the advanced controls and we want to hide the template selector
        $response->AddFieldAction('overrideTemplate', 'init', false,
            array(
                '.template-override-controls' => array('display' => 'none'),
                '.reloadTemplateButton' => array('display' => 'none'),
                '.template-selector-control' => array('display' => 'block')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'change', false,
            array(
                '.template-override-controls' => array('display' => 'none'),
                '.reloadTemplateButton' => array('display' => 'none'),
                '.template-selector-control' => array('display' => 'block')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'init', true,
            array(
                '.template-override-controls' => array('display' => 'block'),
                '.reloadTemplateButton' => array('display' => 'block'),
                '.template-selector-control' => array('display' => 'none')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'change', true,
            array(
                '.template-override-controls' => array('display' => 'block'),
                '.reloadTemplateButton' => array('display' => 'block'),
                '.template-selector-control' => array('display' => 'none')
            ), 'is:checked');
#}

{% extends "form-base.twig" %}
{% import "forms.twig" as forms %}

{% block formTitle %}
    {% trans "Forecast IO" %}
{% endblock %}

{% block formButtons %}
    {% trans "Save" %}, $("#<<id>>").submit()
    {% trans "Cancel" %}, XiboDialogClose()
    {% trans "Help" %}, XiboHelpRender("{{ help }}")
{% endblock %}

{% block callBack %}forecastIoFormSetup{% endblock %}

{% block formHtml %}
    <div class="row">
        <div class="col-md-12">
            <form id="<<id>>" class="XiboForm form-horizontal" method="post" action="{{ urlFor("module.widget.add", {type: module.widget.type, id: playlist.playlistId}) }}">

            </form>
        </div>
    </div>
{% endblock %}