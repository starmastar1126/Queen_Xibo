{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2015 Spring Signage Ltd
 * (${FILE_NAME})
 */
$response = $this->getState();

        // Edit calls are the same as add calls, except you will to check the user has permissions to do the edit
        if (!$this->auth->edit)
            throw new Exception(__('You do not have permission to edit this widget.'));

        // Configure the form
        $this->configureForm('EditMedia');

        // Augment settings with templates
        $this->loadTemplates();

        $tabs = array();
        $tabs[] = Form::AddTab('general', __('General'));
        $tabs[] = Form::AddTab('template', __('Appearance'), array(array('name' => 'enlarge', 'value' => true)));
        $tabs[] = Form::AddTab('effect', __('Effect'));
        $tabs[] = Form::AddTab('advanced', __('Advanced'));
        Theme::Set('form_tabs', $tabs);

        $formFields['general'][] = Form::AddText('name', __('Name'), $this->GetOption('name'),
            __('An optional name for this media'), 'n');

        // Duration
        $formFields['general'][] = Form::AddNumber('duration', __('Duration'), $this->getDuration(),
            __('The duration in seconds this item should be displayed.'), 'd', 'required');

        // Search Term
        $formFields['general'][] = Form::AddText('searchTerm', __('Search Term'), $this->GetOption('searchTerm'),
            __('Search term. You can test your search term in the twitter.com search box first.'), 's', 'required');

        // Type
        $formFields['general'][] = Form::AddCombo('resultType', __('Type'), $this->GetOption('resultType'),
            array(
                array('typeid' => 'mixed', 'type' => __('Mixed')),
                array('typeid' => 'recent', 'type' => __('Recent')),
                array('typeid' => 'popular', 'type' => __('Popular')),
            ),
            'typeid',
            'type',
            __('Recent shows only the most recent tweets, Popular the most popular and Mixed includes both popular and recent results.'), 't', 'required');

        // Distance
        $formFields['general'][] = Form::AddNumber('tweetDistance', __('Distance'), $this->GetOption('tweetDistance'),
            __('Distance in miles that the tweets should be returned from. Set to 0 for no restrictions.'), 'd');

        // Distance
        $formFields['general'][] = Form::AddNumber('tweetCount', __('Count'), $this->GetOption('tweetCount'),
            __('The number of Tweets to return.'), 'c');

        // Common fields
        $formFields['effect'][] = Form::AddCombo(
            'effect',
            __('Effect'),
            $this->GetOption('effect'),
            array(
                array('effectid' => 'none', 'effect' => __('None')),
                array('effectid' => 'fade', 'effect' => __('Fade')),
                array('effectid' => 'fadeout', 'effect' => __('Fade Out')),
                array('effectid' => 'scrollHorz', 'effect' => __('Scroll Horizontal')),
                array('effectid' => 'scrollVert', 'effect' => __('Scroll Vertical')),
                array('effectid' => 'flipHorz', 'effect' => __('Flip Horizontal')),
                array('effectid' => 'flipVert', 'effect' => __('Flip Vertical')),
                array('effectid' => 'shuffle', 'effect' => __('Shuffle')),
                array('effectid' => 'tileSlide', 'effect' => __('Tile Slide')),
                array('effectid' => 'tileBlind', 'effect' => __('Tile Blinds')),
                array('effectid' => 'marqueeLeft', 'effect' => __('Marquee Left')),
                array('effectid' => 'marqueeRight', 'effect' => __('Marquee Right')),
                array('effectid' => 'marqueeUp', 'effect' => __('Marquee Up')),
                array('effectid' => 'marqueeDown', 'effect' => __('Marquee Down')),
            ),
            'effectid',
            'effect',
            __('Please select the effect that will be used to transition between items. If all items should be output, select None. Marquee effects are CPU intensive and may not be suitable for lower power displays.'),
            'e');

        $formFields['effect'][] = Form::AddNumber('speed', __('Speed'), $this->GetOption('speed'),
            __('The transition speed of the selected effect in milliseconds (normal = 1000) or the Marquee Speed in a low to high scale (normal = 1).'), 's', NULL, 'effect-controls');

        // A list of web safe colours
        $formFields['advanced'][] = Form::AddText('backgroundColor', __('Background Colour'), $this->GetOption('backgroundColor'),
            __('The selected effect works best with a background colour. Optionally add one here.'), 'c', NULL, 'background-color-group');

        // Field empty
        $formFields['advanced'][] = Form::AddText('noTweetsMessage', __('No tweets'), $this->GetOption('noTweetsMessage'),
            __('A message to display when there are no tweets returned by the search query'), 'n');

        $formFields['advanced'][] = Form::AddText('dateFormat', __('Date Format'), $this->GetOption('dateFormat'),
            __('The format to apply to all dates returned by the ticker. In PHP date format: http://uk3.php.net/manual/en/function.date.php'), 'f');

        $formFields['advanced'][] = Form::AddCheckbox('removeUrls', __('Remove URLs?'), $this->GetOption('removeUrls', 1),
            __('Should URLs be removed from the Tweet Text. Most URLs do not compliment digital signage.'), 'u');

        $formFields['advanced'][] = FormManager::AddNumber('updateInterval', __('Update Interval (mins)'), $this->GetOption('updateInterval', 60),
            __('Please enter the update interval in minutes. This should be kept as high as possible. For example, if the data will only change once per hour this could be set to 60.'),
            'n', 'required');

        // Encode up the template
        if (Config::GetSetting('SERVER_MODE') == 'Test' && $this->getUser()->userTypeId == 1)
            $formFields['advanced'][] = Form::AddMessage('<pre>' . htmlentities(json_encode(array('id' => 'ID', 'value' => 'TITLE', 'template' => $this->getRawNode('template', null), 'css' => $this->getRawNode('styleSheet', null)))) . '</pre>');

        // Template - for standard stuff
        $formFields['template'][] = Form::AddCombo('templateId', __('Template'), $this->GetOption('templateId', 'tweet-only'),
            $this->module->settings['templates'],
            'id',
            'value',
            __('Select the template you would like to apply. This can be overridden using the check box below.'), 't', 'template-selector-control');

        // Add a field for whether to override the template or not.
        // Default to 1 so that it will work correctly with old items (that didn't have a template selected at all)
        $formFields['template'][] = Form::AddCheckbox('overrideTemplate', __('Override the template?'), $this->GetOption('overrideTemplate', 0),
            __('Tick if you would like to override the template.'), 'o');

        // Add a text template
        $formFields['template'][] = Form::AddMultiText('ta_text', NULL, $this->getRawNode('template', null),
            __('Enter the template. Please note that the background colour has automatically coloured to your layout background colour.'), 't', 10, NULL, 'template-override-controls');

        // Field for the style sheet (optional)
        $formFields['template'][] = Form::AddMultiText('ta_css', NULL, $this->getRawNode('styleSheet', null),
            __('Optional Stylesheet'), 's', 10, NULL, 'template-override-controls');

        // Add some field dependencies
        // When the override template check box is ticked, we want to expose the advanced controls and we want to hide the template selector
        $response->AddFieldAction('overrideTemplate', 'init', false,
            array(
                '.template-override-controls' => array('display' => 'none'),
                '.template-selector-control' => array('display' => 'block')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'change', false,
            array(
                '.template-override-controls' => array('display' => 'none'),
                '.template-selector-control' => array('display' => 'block')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'init', true,
            array(
                '.template-override-controls' => array('display' => 'block'),
                '.template-selector-control' => array('display' => 'none')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'change', true,
            array(
                '.template-override-controls' => array('display' => 'block'),
                '.template-selector-control' => array('display' => 'none')
            ), 'is:checked');

        // Present an error message if the module has not been configured. Don't prevent further configuration.
        if (!extension_loaded('curl') || $this->GetSetting('apiKey') == '' || $this->GetSetting('apiSecret') == '') {
            $formFields['general'][] = Form::AddMessage(__('The Twitter Widget has not been configured yet, please ask your CMS Administrator to look at it for you.'), 'alert alert-danger');
        }

        // Modules should be rendered using the theme engine.
        Theme::Set('form_fields_general', $formFields['general']);
        Theme::Set('form_fields_template', $formFields['template']);
        Theme::Set('form_fields_effect', $formFields['effect']);
        Theme::Set('form_fields_advanced', $formFields['advanced']);

        // Set the field dependencies
        $this->setFieldDepencencies($response);

        $response->html = Theme::RenderReturn('form_render');
        $response->callBack = 'text_callback';
        // Append the templates to the response
        $response->extra = $this->module->settings['templates'];
        $this->configureFormButtons($response);
        $this->response->AddButton(__('Apply'), 'XiboDialogApply("#ModuleForm")');

        // The response must be returned.
        return $response;

        // Add a dependency
        $response->AddFieldAction('effect', 'init', 'none', array('.effect-controls' => array('display' => 'none'), '.background-color-group' => array('display' => 'none')));
        $response->AddFieldAction('effect', 'change', 'none', array('.effect-controls' => array('display' => 'none'), '.background-color-group' => array('display' => 'none')));
        $response->AddFieldAction('effect', 'init', 'none', array('.effect-controls' => array('display' => 'block'), '.background-color-group' => array('display' => 'block')), 'not');
        $response->AddFieldAction('effect', 'change', 'none', array('.effect-controls' => array('display' => 'block'), '.background-color-group' => array('display' => 'block')), 'not');
#}

{% extends "form-base.twig" %}
{% import "forms.twig" as forms %}

{% block formTitle %}
    {% trans "Edit Twitter" %}
{% endblock %}

{% block formButtons %}
    {% trans "Help" %}, XiboHelpRender("{{ help }}")
    {% trans "Cancel" %}, XiboDialogClose()
    {% trans "Save" %}, $("#twitterEditForm").submit()
{% endblock %}

{% block callBack %}text_callback{% endblock %}

{% block formHtml %}
    <div class="row">
        <div class="col-md-12">
                <ul class="nav nav-tabs" role="tablist">
                <li class="active"><a href="#general" role="tab" data-toggle="tab"><span>{% trans "General" %}</span></a></li>
                <li><a href="#template" role="tab" data-toggle="tab"><span>{% trans "Apperance" %}</span></a></li>
                <li><a href="#effect" role="tab" data-toggle="tab"><span>{% trans "Effect" %}</span></a></li>
                <li><a href="#advanced" role="tab" data-toggle="tab"><span>{% trans "Advanced" %}</span></a></li>
            </ul>
            <form id="twitterEditForm" class="XiboForm form-horizontal" method="put" action="{{ urlFor("module.widget.edit", {id: module.widget.widgetId}) }}">
                 <div class="tab-content">
                    <div class="tab-pane active" id="general">
                        {% set title %}{% trans "Name" %}{% endset %}
                        {% set helpText %}{% trans "An optional name for this media" %}{% endset %}
                        {{ forms.text("name", title, module.getOption("name"), helpText) }}

                        {% set title %}{% trans "Duration" %}{% endset %}
                        {% set helpText %}{% trans "The duration in seconds this should be displayed" %}{% endset %}
                        {{ forms.number("duration", title, module.getDuration(), helpText, "", "required") }}

                        {% set title %}{% trans "Search Term" %}{% endset %}
                        {% set helpText %}{% trans "Search term. You can test your search term in the twitter.com search box first." %}{% endset %}
                        {{ forms.text("searchTerm", title, "", helpText), module.getOption("searchTerm"), "required" }}

                        {% set title %}{% trans "Type" %}{% endset %}
                        {% set helpText %}{% trans "Recent shows only the most recent tweets, Popular the most popular and Mixed includes both popular and recent results." %}{% endset %}
                        {% set mixed %}{% trans "Mixed" %}{% endset %}
                        {% set recent %}{% trans "Recent" %}{% endset %}
                        {% set popular %}{% trans "Popular" %}{% endset %}
                        {% set options = [
                        { typeid: 1, type: mixed },
                        { typeid: 2, type: recent },
                        { typeid: 3, type: popular }
                        ] %}
                        {{ forms.dropdown("resultType", "single", title, "mixed", module.getOption("resultType"), "typeid", "type", helpText,"", "required") }}

                        {% set title %}{% trans "Distance" %}{% endset %}
                        {% set helpText %}{% trans "Distance in miles that the tweets should be returned from. Set to 0 for no restrictions." %}{% endset %}
                        {{ forms.number("tweetDistance", title, module.getOption("tweetDistance"), helpText) }}

                        {% set title %}{% trans "Count" %}{% endset %}
                        {% set helpText %}{% trans "The number of Tweets to return." %}{% endset %}
                        {{ forms.number("tweetCount", title, module.getOption("tweetCount"), helpText) }}
                    </div>

                    <div class="tab-pane" id="template">

                    </div>

                    <div class="tab-pane" id="effect">
                        {% set title %}{% trans "Effect" %}{% endset %}
                        {% set helpText %}{% trans "Please select the effect that will be used to transition between items. If all items should be output, select None. Marquee effects are CPU intensive and may not be suitable for lower power displays." %}{% endset %}
                        {% set fade %}{% trans "Fade" %}{% endset %}
                        {% set fadeout %}{% trans "Fade Out" %}{% endset %}
                        {% set scrollHorz %}{% trans "Scroll Horizontal" %}{% endset %}
                        {% set scrollVert %}{% trans "Scroll Vertical" %}{% endset %}
                        {% set flipHorz %}{% trans "Flip Horizontal" %}{% endset %}
                        {% set flipVert %}{% trans "Flip Vertical" %}{% endset %}
                        {% set shuffle %}{% trans "shuffle" %}{% endset %}
                        {% set tileSlide %}{% trans "Tile Slide" %}{% endset %}
                        {% set tileBlind %}{% trans "Tile Blind" %}{% endset %}
                        {% set marqueeLeft %}{% trans "Marquee Left" %}{% endset %}
                        {% set marqueeRight %}{% trans "Marquee Right" %}{% endset %}
                        {% set marqueeUp %}{% trans "Marquee Up" %}{% endset %}
                        {% set marqueeDown %}{% trans "Marquee Down" %}{% endset %}
                        {% set options = [
                        { effectid: "", effect: none },
                        { effectid: fade, effect: fade },
                        { effectid: fadeout, effect: fadeout},
                        { effectid: scrollHorz, effect: scrollHorz},
                        { effectid: scrollVert, effect: scrollVert},
                        { effectid: flipHorz, effect: flipHorz},
                        { effectid: flipVert, effect: flipVert},
                        { effectid: shuffle, effect: shuffle},
                        { effectid: tileSlide, effect: tileSlide},
                        { effectid: tileBlind, effect: tileBlind},
                        { effectid: marqueeLeft, effect: marqueeLeft},
                        { effectid: marqueeRight, effect: marqueeRight},
                        { effectid: marqueeUp, effect: marqueeUp},
                        { effectid: marqueeDown, effect: marqueeDown}
                        ] %}
                        {{ forms.dropdown("effect", "single", title, module.getOption("effect"), "effectid", "effect", helpText) }}

                        {% set title %}{% trans "Speed" %}{% endset %}
                        {% set helpText %}{% trans "The transition speed of the selected effect in milliseconds (normal = 1000) or the Marquee Speed in a low to high scale (normal = 1)." %}{% endset %}
                        {{ forms.number("speed", title, module.getOption("speed"), helpText, "", "effect-controls") }}
                    </div>

                    <div class="tab-pane" id="advanced">
                        {% set title %}{% trans "Background Colour" %}{% endset %}
                        {% set helpText %}{% trans "The selected effect works best with a background colour. Optionally add one here." %}{% endset %}
                        {{ forms.text("backgroundColor", title, module.getOption("backgroundColor"), helpText, "", "", "background-color-group") }}
                        
                        {% set title %}{% trans "No tweets" %}{% endset %}
                        {% set helpText %}{% trans "A message to display when there are no tweets returned by the search query" %}{% endset %}
                        {{ forms.text("noTweetsMessage", title, module.getOption("noTweetsMessage"), helpText) }}
                        
                        {% set title %}{% trans "Date Format" %}{% endset %}
                        {% set helpText %}{% trans "The format to apply to all dates returned by the ticker. In PHP date format: http://uk3.php.net/manual/en/function.date.php" %}{% endset %}
                        {{ forms.text("dateFormat", title, module.getOption("dateFormat"), helpText) }}

                        {% set title %}{% trans "Remove URLs?" %}{% endset %}
                        {% set helpText %}{% trans "Should URLs be removed from the Tweet Text. Most URLs do not compliment digital signage." %}{% endset %}
                        {{ forms.checkbox("removeURLs", title, module.GetOption("removeURLs", 1), helpText) }}

                        {% set title %}{% trans "Update Interval (mins)" %}{% endset %}
                        {% set helpText %}{% trans "Please enter the update interval in minutes. This should be kept as high as possible. For example, if the data will only change once per hour this could be set to 60." %}{% endset %}
                        {{ forms.number("updateInterval", title, module.getOption("updateInterval", 60), helpText, "", "required") }}
                    <div>
                </div>
            </form>
        </div>
    </div>
{% endblock %}