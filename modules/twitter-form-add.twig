{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2015 Spring Signage Ltd
 * (${FILE_NAME})
 */
// Augment settings with templates
        $this->loadTemplates();

        // Configure form
        $this->configureForm('AddMedia');

        $tabs = array();
        $tabs[] = Form::AddTab('general', __('General'));
        $tabs[] = Form::AddTab('template', __('Template'), array(array('name' => 'enlarge', 'value' => true)));
        $tabs[] = Form::AddTab('effect', __('Effect'));
        $tabs[] = Form::AddTab('advanced', __('Advanced'));
        Theme::Set('form_tabs', $tabs);

        $formFields['general'][] = Form::AddText('name', __('Name'), NULL,
            __('An optional name for this media'), 'n');

        // Any values for the form fields should be added to the theme here.
        $formFields['general'][] = Form::AddNumber('duration', __('Duration'), NULL,
            __('The duration in seconds this item should be displayed.'), 'd', 'required');

        // Any values for the form fields should be added to the theme here.
        $formFields['general'][] = Form::AddText('searchTerm', __('Search Term'), NULL,
            __('Search term. You can test your search term in the twitter.com search box first.'), 's', 'required');

        // Type
        $formFields['general'][] = Form::AddCombo('resultType', __('Type'), 'mixed',
            array(
                array('typeid' => 'mixed', 'type' => __('Mixed')),
                array('typeid' => 'recent', 'type' => __('Recent')),
                array('typeid' => 'popular', 'type' => __('Popular')),
            ),
            'typeid',
            'type',
            __('Recent shows only the most recent tweets, Popular the most popular and Mixed includes both popular and recent results.'), 't', 'required');

        // Distance
        $formFields['general'][] = Form::AddNumber('tweetDistance', __('Distance'), NULL,
            __('Distance in miles that the tweets should be returned from. Set to 0 for no restrictions.'), 'd');

        // Distance
        $formFields['general'][] = Form::AddNumber('tweetCount', __('Count'), 15,
            __('The number of Tweets to return.'), 'c');

        // Common fields
        $formFields['effect'][] = Form::AddCombo(
            'effect',
            __('Effect'),
            $this->GetOption('effect'),
            array(
                array('effectid' => 'none', 'effect' => __('None')),
                array('effectid' => 'fade', 'effect' => __('Fade')),
                array('effectid' => 'fadeout', 'effect' => __('Fade Out')),
                array('effectid' => 'scrollHorz', 'effect' => __('Scroll Horizontal')),
                array('effectid' => 'scrollVert', 'effect' => __('Scroll Vertical')),
                array('effectid' => 'flipHorz', 'effect' => __('Flip Horizontal')),
                array('effectid' => 'flipVert', 'effect' => __('Flip Vertical')),
                array('effectid' => 'shuffle', 'effect' => __('Shuffle')),
                array('effectid' => 'tileSlide', 'effect' => __('Tile Slide')),
                array('effectid' => 'tileBlind', 'effect' => __('Tile Blinds')),
                array('effectid' => 'marqueeLeft', 'effect' => __('Marquee Left')),
                array('effectid' => 'marqueeRight', 'effect' => __('Marquee Right')),
                array('effectid' => 'marqueeUp', 'effect' => __('Marquee Up')),
                array('effectid' => 'marqueeDown', 'effect' => __('Marquee Down')),
            ),
            'effectid',
            'effect',
            __('Please select the effect that will be used to transition between items. If all items should be output, select None. Marquee effects are CPU intensive and may not be suitable for lower power displays.'),
            'e');

        $formFields['effect'][] = Form::AddNumber('speed', __('Speed'), NULL,
            __('The transition speed of the selected effect in milliseconds (normal = 1000) or the Marquee Speed in a low to high scale (normal = 1).'), 's', NULL, 'effect-controls');

        // A list of web safe colours
        $formFields['advanced'][] = Form::AddText('backgroundColor', __('Background Colour'), NULL,
            __('The selected effect works best with a background colour. Optionally add one here.'), 'c', NULL, 'background-color-group');

        // Field empty
        $formFields['advanced'][] = Form::AddText('noTweetsMessage', __('No tweets'), NULL,
            __('A message to display when there are no tweets returned by the search query'), 'n');

        // Date format
        $formFields['advanced'][] = Form::AddText('dateFormat', __('Date Format'), 'd M',
            __('The format to apply to all dates returned by the ticker. In PHP date format: http://uk3.php.net/manual/en/function.date.php'), 'f');

        $formFields['advanced'][] = FormManager::AddNumber('updateInterval', __('Update Interval (mins)'), 60,
            __('Please enter the update interval in minutes. This should be kept as high as possible. For example, if the data will only change once per hour this could be set to 60.'),
            'n', 'required');

        // Template - for standard stuff
        $formFields['template'][] = Form::AddCombo('templateId', __('Template'), $this->GetOption('templateId', 'tweet-only'),
            $this->module->settings['templates'],
            'id',
            'value',
            __('Select the template you would like to apply. This can be overridden using the check box below.'), 't', 'template-selector-control');

        // Add a field for whether to override the template or not.
        // Default to 1 so that it will work correctly with old items (that didn't have a template selected at all)
        $formFields['template'][] = Form::AddCheckbox('overrideTemplate', __('Override the template?'), $this->GetOption('overrideTemplate', 0),
            __('Tick if you would like to override the template.'), 'o');

        // Add a text template
        $formFields['template'][] = Form::AddMultiText('ta_text', NULL, null,
            __('Enter the template. Please note that the background colour has automatically coloured to your layout background colour.'), 't', 10, NULL, 'template-override-controls');

        // Field for the style sheet (optional)
        $formFields['template'][] = Form::AddMultiText('ta_css', NULL, null,
            __('Optional Stylesheet'), 's', 10, NULL, 'template-override-controls');

        // Add some field dependencies
        // When the override template check box is ticked, we want to expose the advanced controls and we want to hide the template selector
        $response->AddFieldAction('overrideTemplate', 'init', false,
            array(
                '.template-override-controls' => array('display' => 'none'),
                '.template-selector-control' => array('display' => 'block')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'change', false,
            array(
                '.template-override-controls' => array('display' => 'none'),
                '.template-selector-control' => array('display' => 'block')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'init', true,
            array(
                '.template-override-controls' => array('display' => 'block'),
                '.template-selector-control' => array('display' => 'none')
            ), 'is:checked');
        $response->AddFieldAction('overrideTemplate', 'change', true,
            array(
                '.template-override-controls' => array('display' => 'block'),
                '.template-selector-control' => array('display' => 'none')
            ), 'is:checked');

        // Present an error message if the module has not been configured. Don't prevent further configuration.
        if (!extension_loaded('curl') || $this->GetSetting('apiKey') == '' || $this->GetSetting('apiSecret') == '') {
            $formFields['general'][] = Form::AddMessage(__('The Twitter Widget has not been configured yet, please ask your CMS Administrator to look at it for you.'), 'alert alert-danger');
        }

        // Modules should be rendered using the theme engine.
        Theme::Set('form_fields_general', $formFields['general']);
        Theme::Set('form_fields_template', $formFields['template']);
        Theme::Set('form_fields_effect', $formFields['effect']);
        Theme::Set('form_fields_advanced', $formFields['advanced']);

        // Set the field dependencies
        $this->setFieldDepencencies($response);
        $response->html = Theme::RenderReturn('form_render');

        $response->callBack = 'text_callback';
        // Append the templates to the response
        $response->extra = $this->module->settings['templates'];
        $this->configureFormButtons($response);

        // The response must be returned.
        return $response;

        // Add a dependency
        $response->AddFieldAction('effect', 'init', 'none', array('.effect-controls' => array('display' => 'none'), '.background-color-group' => array('display' => 'none')));
        $response->AddFieldAction('effect', 'change', 'none', array('.effect-controls' => array('display' => 'none'), '.background-color-group' => array('display' => 'none')));
        $response->AddFieldAction('effect', 'init', 'none', array('.effect-controls' => array('display' => 'block'), '.background-color-group' => array('display' => 'block')), 'not');
        $response->AddFieldAction('effect', 'change', 'none', array('.effect-controls' => array('display' => 'block'), '.background-color-group' => array('display' => 'block')), 'not');
#}

{% extends "form-base.twig" %}
{% import "forms.twig" as forms %}

{% block formTitle %}
    {% trans "Add Twitter" %}
{% endblock %}

{% block formButtons %}
    {% trans "Save" %}, $("#<<id>>").submit()
    {% trans "Cancel" %}, XiboDialogClose()
    {% trans "Help" %}, XiboHelpRender("{{ help }}")
{% endblock %}

{% block callBack %}text_callback{% endblock %}

{% block formHtml %}
    <div class="row">
        <div class="col-md-12">
            <form id="<<id>>" class="XiboForm form-horizontal" method="post" action="{{ urlFor("module.widget.add", {type: module.widget.type, id: playlist.playlistId}) }}">

            </form>
        </div>
    </div>
{% endblock %}