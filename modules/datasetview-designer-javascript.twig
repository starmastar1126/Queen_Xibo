{#
/*
 * Spring Signage Ltd - http://www.springsignage.com
 * Copyright (C) 2016 Spring Signage Ltd
 * (${FILE_NAME})
 */

#}

<script type="text/javascript">

    // Runs after form opens
    function datasetview_form_edit_open() {

        if($(this).find('form').data('formStep') === 1) {
            // If data set exists, set the drop-down to that value
            if(this.data().elementOptions.dataSetId !== undefined) {
                $(this).find('#dataSetId').val(this.data().elementOptions.dataSetId);
            }
        } else if($(this).find('form').data('formStep') === 2) {
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#useDuration', '.duration-fields');

            // Set display location field, using the helper ()
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#useDisplayLocation', '', '.locationControls');

            // Set override template field, using the helper ()
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#overrideTemplate', '.template-override-controls, .reloadTemplateButton', '.template-selector-control');

            // Set order and filtering clauses fields, using the helper ()
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#useOrderingClause', '.order-clause-field', '#orderClause');
            formHelpers.setupCheckboxInputFields($(this).find('form'), '#useFilteringClause', '.filter-clause-field', '#filterClause');

            dataSetFormSetup(this);
        }
    }

    // Runs before form submit
    function datasetview_form_edit_submit() {
        
        if($(this).find('form').data('formStep') === 2) {
            var form = $("#dataSetViewEditForm");

            // Clean the previous generated hidden dataSetColumns from the form
            form.find('input[name="dataSetColumnId[]"]').remove();

            // Add all the selected columns to the form as hidden input fields
            $($("#columnsIn").sortable('toArray')).each(function() {
                form.append('<input type="hidden" name="dataSetColumnId[]" value="' + this + '" />');
            });

            form.data("apply", true);
            
            formHelpers.updateCKEditor();
        }
    }

    function dataSetFormSetup(dialog) {

        // Setup lists drag and sort ( with double click )
        $("#columnsIn, #columnsOut").sortable({
            connectWith: '.connectedSortable',
            dropOnEmpty: true
        }).disableSelection();
        $(".li-sortable", dialog).dblclick(switchLists);

        // If all 3 of the template fields are empty, then the template should be reapplied.
        if (!$("#overrideTemplate").is(":checked") && $("#styleSheet").val() == "") {
            // Reapply
            var templateId = $("#templateId").val();

            $.each($(dialog).data().extra.templates, function(index, value) {
                if (value.id == templateId) {
                    $("#styleSheet").val(value.css);
                }
            });
        }

        $("#templateId").on('change', function() {
            // Check to see if the override template check box is unchecked
            if (!$("#overrideTemplate").is(":checked")) {

                var templateId = $("#templateId").val();

                $.each($(dialog).data().extra.templates, function(index, value) {
                    if (value.id == templateId) {
                        $("#styleSheet").val(value.css);
                    }
                });
            }
        });

        // Translations for the query builder
        var translations = {
            ascTitle: "{% trans "Ascending" %}",
            descTitle: "{% trans "Descending" %}",
            filterOptions: [
                {
                    id: "starts-with",
                    value: "{% trans "starts with" %}"
                }, {
                    id: "ends-with",
                    value: "{% trans "ends with" %}"
                }, {
                    id: "contains",
                    value: "{% trans "contains" %}"
                }, {
                    id: "equals",
                    value: "{% trans "equals" %}"
                }, {
                    id: "not-starts-with",
                    value: "{% trans "does not start with" %}"
                }, {
                    id: "not-ends-with",
                    value: "{% trans "does not end with" %}"
                }, {
                    id: "not-contains",
                    value: "{% trans "does not contain" %}"
                }, {
                    id: "not-equals",
                    value: "{% trans "does not equal" %}"
                }, {
                    id: "greater-than",
                    value: "{% trans "greater than" %}"
                }, {
                    id: "less-than",
                    value: "{% trans "less than" %}"
                }
            ],
            filterOperatorOptions: [
                {
                    id: "OR",
                    value: "{% trans "Or" %}"
                }, {
                    id: "AND",
                    value: "{% trans "And" %}"
                }
            ]
        };

        // Configure the query for sorting and filtering
        formHelpers.configureQueryBuilder(dialog, translations);

        // Initialise CKEditor for the noDataMessage
        formHelpers.setupCKEditor($(dialog), null, 'noDataMessage');

        // Configure some color pickers
        $(dialog).find("#backgroundColor").colorpicker();
        $(dialog).find("#borderColor").colorpicker();
        $(dialog).find("#fontColor").colorpicker();

        // Populate the font list with options
        var $fontFamily = $(dialog).find("#fontFamily");
        $.ajax({
            method: "GET",
            url: $fontFamily.data('searchUrl'),
            success: function(res) {
                if (res.success) {
                    $.each(res.data, function(index, element) {
                        if ($fontFamily.data('value') === element.familyName) {
                            $fontFamily.append($('<option value="' + element.familyName + '" selected>' + element.displayName + '</option>'));
                        } else {
                            $fontFamily.append($('<option value="' + element.familyName + '">' + element.displayName + '</option>'));
                        }
                    });
                }
            }
        });
    }
</script>